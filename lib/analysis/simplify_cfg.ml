open Cfgood


let simplify_method m h = 
  match m with 
  |Cfg.Empty_method->()
  |Cfg.Method(m')->
    Hashtbl.iter (
      fun b_pos block-> 
        let node_value = block.Cfg.instructions in 
        let next  = List.map (
          fun next_blocks -> (m'.name,next_blocks) 
          ) block.next in 
        let node_pos = (m'.name,b_pos) in 
        Hashtbl.add h node_pos (Node(node_value,next))
    ) m'.cfg;
    (* here we deal with the extra-method arcs: the call arcs generated by the invokes*)
    (*the return arcs are described specifically in Cfg.icfg*)
    Hashtbl.iter (
      fun b_pos m_id -> 
        let node_pos = (m'.name,b_pos) in
        let Node(node_value,current_next) = Hashtbl.find h node_pos in
          Hashtbl.replace h node_pos (Node(node_value,(m_id,0)::current_next))
    ) m'.invokes


let simplify_icfg cfg = 
  match cfg with 
  |Cfg.Empty_cfg -> Empty_cfg 
  |Cfg.Icfg(cfg') ->
    let node_number = Hashtbl.fold (
      fun _ m n -> match m with 
        |Cfg.Empty_method -> n
        |Cfg.Method(m')-> n+ Hashtbl.length m'.cfg
    ) cfg'.cfgs 0 in 
    let new_cfg = Hashtbl.create node_number in 
    Hashtbl.iter (
      fun _ m -> simplify_method m new_cfg
    ) cfg'.cfgs;
    (*need to add the return arcs, *)
    let i = Hashtbl.length cfg'.return_arcs in 
    Printf.printf "return size: %i\n" i;
    Hashtbl.iter (
      fun m_id node_pos -> 
        let return_method = Hashtbl.find_opt cfg'.cfgs m_id in 
        match return_method with 
        |None ->
          let s = Cfg.string_of_node_position node_pos in 
          Printf.printf "WRONG: %s\n" s;
        |Some(return_method') -> 
          let s = Cfg.string_of_node_position node_pos in 
          Printf.printf "GOOD: %s\n" s;
          match return_method' with |Cfg.Empty_method -> ()
        |Cfg.Method(return) ->
        List.iter (
          fun b_pos -> 
            let Node(node_value,current_next) = Hashtbl.find new_cfg (m_id,b_pos) in 
            Hashtbl.replace new_cfg (m_id,b_pos) (Node(node_value,node_pos::current_next))
        ) return.exit;
    ) cfg'.return_arcs;
    Cfg(new_cfg)